// Code generated by MockGen. DO NOT EDIT.
// Source: message_hub.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	gomock "github.com/golang/mock/gomock"
	domain "gossip/domain"
	reflect "reflect"
)

// MockMessageExchange is a mock of MessageExchange interface
type MockMessageExchange struct {
	ctrl     *gomock.Controller
	recorder *MockMessageExchangeMockRecorder
}

// MockMessageExchangeMockRecorder is the mock recorder for MockMessageExchange
type MockMessageExchangeMockRecorder struct {
	mock *MockMessageExchange
}

// NewMockMessageExchange creates a new mock instance
func NewMockMessageExchange(ctrl *gomock.Controller) *MockMessageExchange {
	mock := &MockMessageExchange{ctrl: ctrl}
	mock.recorder = &MockMessageExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageExchange) EXPECT() *MockMessageExchangeMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockMessageExchange) Subscribe() (<-chan domain.Message, error) {
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMessageExchangeMockRecorder) Subscribe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMessageExchange)(nil).Subscribe))
}
